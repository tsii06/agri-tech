import { ethers } from "ethers";
import { getCollecteurProducteurContract } from "../contract";
import { ajouterKeyValuesFileIpfs, deleteFromIPFSByCid, getFileFromPinata, uploadConsolidatedData, computeSeasonFromDate, filterIntrantsForSeason, filterIntrantsForHarvest, getMasterFromCid, calculateNumeroRecolte } from "../ipfsUtils";
import { getActeur } from "./gestionnaireActeurs";
import { getParcelle } from "./producteur";

const contrat = await getCollecteurProducteurContract();

/**
 *
 * @param {number} _idCommande
 * @returns
 */
export const getCommandeRecolte = async (_idCommande) => {
  try {
    const res = await contrat.getCommande(_idCommande);

    const producteurDetails = await getActeur(res.producteur.toString());
    const collecteurDetails = await getActeur(res.collecteur.toString());
    const transporteurDetails = res.transporteur !== ethers.ZeroAddress ? await getActeur(res.transporteur.toString()):{};

    return {
      id: Number(res.id),
      idRecolte: Number(res.idRecolte),
      quantite: Number(res.quantite),
      prix: Number(res.prix),
      statutTransport: Number(res.statutTransport),
      statutRecolte: Number(res.statutRecolte),
      payer: res.payer,
      producteur: { ...producteurDetails, adresse: res.producteur.toString() },
      collecteur: { ...collecteurDetails, adresse: res.collecteur.toString() },
      enregistrerCondition: res.enregistrerCondition,
      transporteur: { ...transporteurDetails, adresse: res.transporteur.toString() },
    };
  } catch (error) {
    console.log("Recuperation commande lot produit : ", error);
    return {};
  }
};

/**
 *
 * @param {number} _idCommande
 * @returns
 */
export const getConditionTransportPC = async (_idCommande) => {
  let conditionComplet = {};
  // recuperer conditions transport on-chain
  try {
    const conditionOnChain = await contrat.getConditionTransport(_idCommande);
    conditionComplet = {
      id: conditionOnChain.id,
      cid: conditionOnChain.cid,
      hashMerkle: conditionOnChain.hashMerkle,
    };
  } catch (error) {
    console.error("Erreur recuperation condition transport CE : ", error);
    return;
  }
  // si il n'y a pas de cid, on arrete
  if (!conditionComplet.cid || conditionComplet.cid === "") {
    return conditionComplet;
  }
  // recuperer conditions transport ipfs
  const conditionIpfs = await getFileFromPinata(conditionComplet.cid);
  conditionComplet = {
    ...conditionComplet,
    ...conditionIpfs.data.items,
    ...conditionIpfs?.keyvalues,
  };
  return conditionComplet;
};

/**
 * R√©cup√®re toutes les r√©coltes d'une parcelle sp√©cifique tri√©es par date
 * @param {number} idParcelle - ID de la parcelle
 * @returns {Array} Liste des r√©coltes tri√©es par date (plus ancienne en premier)
 */
export const getRecoltesParParcelle = async (idParcelle) => {
  try {
    const contract = await getCollecteurProducteurContract();
    const compteurRecoltes = await contract.compteurRecoltes();
    const recoltesParcelle = [];
    
    // Parcourir toutes les r√©coltes pour trouver celles de cette parcelle
    for (let i = 1; i <= compteurRecoltes; i++) {
      try {
        const recolteOnChain = await contract.getRecolte(i);
        const idParcelles = Object.values(recolteOnChain.idParcelle).map(id => Number(id));
        
        // Si cette r√©colte concerne notre parcelle
        if (idParcelles.includes(Number(idParcelle))) {
          // R√©cup√©rer les donn√©es off-chain pour avoir la date
          let dateRecolte = null;
          if (recolteOnChain.cid && recolteOnChain.cid !== "") {
            try {
              const recolteIpfs = await getFileFromPinata(recolteOnChain.cid.toString());
              dateRecolte = recolteIpfs?.data?.items?.dateRecolte;
            } catch (ipfsError) {
              console.warn(`Erreur IPFS pour r√©colte ${i}:`, ipfsError);
            }
          }
          
          if (dateRecolte) {
            recoltesParcelle.push({
              id: Number(recolteOnChain.id),
              dateRecolte: dateRecolte,
              idParcelles: idParcelles
            });
          }
        }
      } catch (error) {
        console.warn(`Erreur lors de la r√©cup√©ration de la r√©colte ${i}:`, error);
      }
    }
    
    // Trier par date de r√©colte (plus ancienne en premier)
    return recoltesParcelle.sort((a, b) => new Date(a.dateRecolte) - new Date(b.dateRecolte));
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des r√©coltes par parcelle:', error);
    return [];
  }
};

/**
 * Trouve la date de la r√©colte pr√©c√©dente pour une r√©colte donn√©e sur une parcelle
 * @param {number} idParcelle - ID de la parcelle
 * @param {string} dateRecolteActuelle - Date de la r√©colte actuelle
 * @returns {string|null} Date de la r√©colte pr√©c√©dente ou null si premi√®re r√©colte
 */
export const getDateRecoltePrecedente = async (idParcelle, dateRecolteActuelle) => {
  try {
    const recoltesParParcelle = await getRecoltesParParcelle(idParcelle);
    const dateActuelle = new Date(dateRecolteActuelle);
    
    // Trouver la r√©colte pr√©c√©dente (la plus r√©cente avant la date actuelle)
    let recoltePrecedente = null;
    for (const recolte of recoltesParParcelle) {
      const dateRecolte = new Date(recolte.dateRecolte);
      if (dateRecolte < dateActuelle) {
        recoltePrecedente = recolte;
      } else {
        break; // On a d√©pass√© la date actuelle
      }
    }
    
    return recoltePrecedente ? recoltePrecedente.dateRecolte : null;
  } catch (error) {
    console.error('Erreur lors de la recherche de la r√©colte pr√©c√©dente:', error);
    return null;
  }
};
export const getRecolte = async (_idRecolte) => {
  let recolteComplet = {};

  // recuperer info on-chain
  try {
    const recolteOnChain = await contrat.getRecolte(_idRecolte);

    // convertir array
    const idParcelles = Object.values(recolteOnChain.idParcelle);
    // recuperer details acteur
    const producteurDetails = await getActeur(
      recolteOnChain.producteur.toString()
    );

    recolteComplet = {
      id: Number(recolteOnChain.id),
      quantite: Number(recolteOnChain.quantite),
      prixUnit: Number(recolteOnChain.prixUnit),
      idParcelle: idParcelles.map((id) => Number(id)),
      certifie: recolteOnChain.certifie,
      certificatPhytosanitaire:
        recolteOnChain.certificatPhytosanitaire.toString(),
      producteur: {
        ...producteurDetails,
        adresse: recolteOnChain.producteur.toString(),
      },
      hashMerkle: recolteOnChain.hashMerkle.toString(),
      cid: recolteOnChain.cid.toString(),
    };
  } catch (error) {
    console.error("Recuperation recolte : ", error);
  }

  // recuperation info off-chain
  if (recolteComplet.cid && recolteComplet.cid !== "") {
    const recolteIpfs = await getFileFromPinata(recolteComplet.cid);
    // Format : jour mois ann√©e
    let dateRecolteFormat = "N/A";
    const dateRecolteOriginal = recolteIpfs?.data?.items?.dateRecolte;
    
    if (dateRecolteOriginal && dateRecolteOriginal !== "") {
      dateRecolteFormat = new Date(dateRecolteOriginal)
        .toLocaleDateString("fr-FR", {
          year: "numeric",
          month: "long",
          day: "numeric",
        });
    }

    // Calculer la saison bas√©e sur la date de r√©colte avec logique dynamique
    let saison = null;
    let numeroRecolte = 1;
    
    try {
      // R√©cup√©rer les intrants de la premi√®re parcelle pour calculer la saison
      const premiereParcelle = recolteComplet.idParcelle[0];
      const parcelle = await getParcelle(premiereParcelle);
      let intrantsParcelle = [];
      
      if (parcelle && parcelle.cid) {
        const masterParcelle = await getMasterFromCid(parcelle.cid);
        intrantsParcelle = Array.isArray(masterParcelle?.intrants) ? masterParcelle.intrants : [];
      }
      
      // Calculer le num√©ro de r√©colte
      const recoltesExistantes = await getRecoltesParParcelle(premiereParcelle);
      numeroRecolte = await calculateNumeroRecolte(premiereParcelle, dateRecolteOriginal, recoltesExistantes);
      
      // Calculer la date de r√©colte pr√©c√©dente
      const dateRecoltePrecedente = await getDateRecoltePrecedente(premiereParcelle, dateRecolteOriginal);
      
      // Calculer la saison dynamique
      saison = computeSeasonFromDate(
        dateRecolteOriginal, 
        dateRecoltePrecedente, 
        intrantsParcelle, 
        premiereParcelle,
        numeroRecolte
      );
    } catch (saisonError) {
      console.warn('Erreur calcul saison dynamique:', saisonError);
      // Fallback vers ancien syst√®me si erreur
      const year = new Date(dateRecolteOriginal).getUTCFullYear();
      saison = {
        nom: `Culture ${year}-R${numeroRecolte}`,
        identifiant: `${year}-R${numeroRecolte}`,
        annee: year,
        numeroRecolte: numeroRecolte,
        typeSaison: 'fallback'
      };
    }
    
    // üåø PRIORISER les intrants stock√©s dans IPFS (nouvelles r√©coltes)
    let intrantsUtilises = [];
    let dateRecoltePrecedente = null;
    
    // V√©rifier si les intrants sont d√©j√† stock√©s dans le fichier IPFS de la r√©colte
    if (recolteIpfs?.data?.items?.intrantsUtilises && Array.isArray(recolteIpfs.data.items.intrantsUtilises)) {
      // Utiliser les intrants d√©j√† stock√©s (version 2.0+)
      intrantsUtilises = recolteIpfs.data.items.intrantsUtilises;
      dateRecoltePrecedente = recolteIpfs.data.items.dateRecoltePrecedente || null;
      
      console.log(`üì¶ Intrants r√©cup√©r√©s depuis IPFS pour r√©colte ${recolteComplet.id}:`, {
        count: intrantsUtilises.length,
        source: 'IPFS_STORED',
        version: recolteIpfs.data.items.version || '2.0'
      });
    } else {
      // Fallback: calcul dynamique pour les anciennes r√©coltes (version 1.0)
      console.log(`üîÑ Calcul dynamique des intrants pour r√©colte ${recolteComplet.id} (version 1.0)`);
      
      try {
        // Pour chaque parcelle associ√©e √† cette r√©colte
        for (const idParcelle of recolteComplet.idParcelle) {
          try {
            const parcelle = await getParcelle(idParcelle);
            if (parcelle && parcelle.cid) {
              const masterParcelle = await getMasterFromCid(parcelle.cid);
              const intrantsParcelle = Array.isArray(masterParcelle?.intrants) ? masterParcelle.intrants : [];
              
              // Trouver la date de la r√©colte pr√©c√©dente pour cette parcelle
              if (!dateRecoltePrecedente) {
                dateRecoltePrecedente = await getDateRecoltePrecedente(idParcelle, dateRecolteOriginal);
              }
              
              console.log(`üåø Parcelle ${idParcelle} - R√©colte actuelle: ${dateRecolteOriginal}, Pr√©c√©dente: ${dateRecoltePrecedente || 'Aucune'}`);
              
              // Filtrer les intrants selon la nouvelle r√®gle
              const intrantsFilters = filterIntrantsForHarvest(
                intrantsParcelle, 
                dateRecolteOriginal, 
                dateRecoltePrecedente
              );
              
              console.log(`üåø ${intrantsFilters.length} intrants valid√©s pour la parcelle ${idParcelle}`);
              intrantsUtilises.push(...intrantsFilters);
            }
          } catch (parcelleError) {
            console.warn(`Erreur r√©cup√©ration parcelle ${idParcelle}:`, parcelleError);
          }
        }
        
        // Supprimer les doublons d'intrants si plusieurs parcelles ont les m√™mes
        intrantsUtilises = intrantsUtilises.filter((intrant, index, self) => 
          index === self.findIndex(i => i.nom === intrant.nom && i.dateAjout === intrant.dateAjout)
        );
        
      } catch (intrantsError) {
        console.warn("Erreur r√©cup√©ration intrants:", intrantsError);
      }
      
      // Pour la premi√®re parcelle, r√©cup√©rer la date de r√©colte pr√©c√©dente pour l'affichage
      if (!dateRecoltePrecedente && recolteComplet.idParcelle.length > 0) {
        dateRecoltePrecedente = await getDateRecoltePrecedente(recolteComplet.idParcelle[0], dateRecolteOriginal);
      }
    }
    
    console.log(`‚úÖ ${intrantsUtilises.length} intrants finaux pour la r√©colte ${recolteComplet.id}`);
    
    return {
      ...recolteIpfs.data.items,
      ...recolteIpfs?.keyvalues,
      ...recolteComplet,
      dateRecolte: dateRecolteFormat,
      dateRecolteOriginal: dateRecolteOriginal, // Garder la date originale pour les calculs
      dateRecoltePrecedente: dateRecoltePrecedente, // Date de la r√©colte pr√©c√©dente
      saison: saison,
      numeroRecolte: numeroRecolte, // Ajouter le num√©ro de r√©colte
      intrantsUtilises: intrantsUtilises,
      intrantsSource: recolteIpfs?.data?.items?.intrantsUtilises ? 'IPFS_STORED' : 'DYNAMIC_CALC', // Indicateur de source
    };
  } else {
    return recolteComplet;
  }
};

/**
 * Cr√©e une r√©colte avec stockage des intrants utilis√©s dans IPFS
 * @param {object} recolteData 
 * @param {object} parcelle 
 */
export const createRecolte = async (recolteData, parcelle) => {
  let cidRecolte = '';
  try {
    const contratProcteur = await getCollecteurProducteurContract();
    
    // 1. R√©cup√©rer les intrants valides selon la r√®gle d'association
    let intrantsUtilises = [];
    let dateRecoltePrecedente = null;
    let numeroRecolte = 1;
    let intrantsParcelle = [];
    
    try {
      // R√©cup√©rer la date de la r√©colte pr√©c√©dente
      dateRecoltePrecedente = await getDateRecoltePrecedente(parcelle.id, recolteData.dateRecolte);
      
      // Calculer le num√©ro de r√©colte pour cette parcelle
      const recoltesExistantes = await getRecoltesParParcelle(parcelle.id);
      numeroRecolte = await calculateNumeroRecolte(parcelle.id, recolteData.dateRecolte, recoltesExistantes);
      
      // R√©cup√©rer les intrants de la parcelle
      if (parcelle && parcelle.cid) {
        const masterParcelle = await getMasterFromCid(parcelle.cid);
        intrantsParcelle = Array.isArray(masterParcelle?.intrants) ? masterParcelle.intrants : [];
        
        // Filtrer selon la r√®gle d'association
        intrantsUtilises = filterIntrantsForHarvest(
          intrantsParcelle,
          recolteData.dateRecolte,
          dateRecoltePrecedente
        );
        
        console.log(`üåø Intrants valid√©s pour nouvelle r√©colte:`, {
          parcelle: parcelle.id,
          dateRecolte: recolteData.dateRecolte,
          dateRecoltePrecedente: dateRecoltePrecedente || 'Premi√®re r√©colte',
          numeroRecolte: numeroRecolte,
          intrantsCount: intrantsUtilises.length,
          intrants: intrantsUtilises.map(i => `${i.nom} (${i.dateAjout})`)
        });
      }
    } catch (intrantsError) {
      console.warn('Erreur lors de la r√©cup√©ration des intrants:', intrantsError);
    }
    
    // 2. Cr√©er l'objet r√©colte consolid√© avec intrants pour IPFS
    // Calculer la saison dynamique
    const saison = computeSeasonFromDate(
      recolteData.dateRecolte, 
      dateRecoltePrecedente, 
      intrantsParcelle, 
      parcelle.id,
      numeroRecolte
    );
    
    const recolteConsolidee = {
      type: "recolte",
      parcelleId: parseInt(parcelle.id),
      nomProduit: recolteData.nomProduit,
      quantite: parseInt(recolteData.quantite),
      prix: parseInt(recolteData.prix),
      dateRecolte: recolteData.dateRecolte,
      producteur: parcelle.producteur?.adresse,
      parcelleHashMerkle: parcelle?.hashMerkle || "",
      // üåø NOUVEAUT√â: Stockage des intrants utilis√©s dans IPFS
      intrantsUtilises: intrantsUtilises,
      dateRecoltePrecedente: dateRecoltePrecedente,
      numeroRecolte: numeroRecolte, // Nouveau: num√©ro de r√©colte s√©quentiel
      saison: saison, // Nouvelle logique de saison dynamique
      regleAssociation: {
        appliquee: true,
        version: "1.0",
        description: "Intrants appliqu√©s apr√®s r√©colte pr√©c√©dente et avant/√† r√©colte actuelle"
      },
      timestamp: Date.now(),
      version: "2.1", // Version am√©lior√©e avec saison dynamique
    };

    // 3. Upload des donn√©es consolid√©es sur IPFS
    const recolteUpload = await uploadConsolidatedData(
      recolteConsolidee,
      "recolte"
    );
    cidRecolte = recolteUpload.cid;
    if (!recolteUpload.success) {
      throw new Error(
        "Erreur lors de l'upload des donn√©es de r√©colte sur IPFS"
      );
    }

    // 4. Cr√©er la r√©colte avec le CID IPFS
    const tx = await contratProcteur.ajoutRecolte(
      [parseInt(parcelle.id)], // Tableau de parcelles
      parseInt(recolteData.quantite),
      parseInt(recolteData.prix),
      recolteUpload.cid // CID IPFS
    );
    await tx.wait();

    // 5. Ajouter hash transaction aux keyvalues du fichier recolte sur ipfs
    await ajouterKeyValuesFileIpfs(recolteUpload.cid, { 
      hashTransaction: tx.hash,
      intrantsStoredCount: intrantsUtilises.length,
      intrantsStoredAt: new Date().toISOString()
    });
    
    console.log(`‚úÖ R√©colte cr√©√©e avec ${intrantsUtilises.length} intrants stock√©s dans IPFS`);
    
    return tx;
  } catch (error) {
    console.error("Creation recolte :", error);

    // supprimer le fichier sur ipfs si erreur
    if (cidRecolte !== "") deleteFromIPFSByCid(cidRecolte);

    throw new Error("Creation recolte.");
  }
};
